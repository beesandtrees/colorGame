{"version":3,"sources":["actions/types.js","actions/index.js","helpers/constants.js","helpers/helpers.js","components/Logo/Logo.js","components/Block/Block.js","components/Board/Board.js","components/WinLose/WinLose.js","components/App.js","serviceWorker.js","reducers/game-reducers.js","reducers/index.js","index.js"],"names":["CLICKS","GRID","BLOCKS","HASWON","LEVEL","updateClicks","click","type","types","createGrid","grid","loadBlocks","blocks","didWin","won","updateLevel","level","winText","colorArrays","rand","n","Math","floor","random","fisherYates","array","t","i","m","length","createLevel","l","ceil","colorSet","colors","colorscheme","numberofrows","maxclick","numberofcolors","findColor","j","square","color","populateGrid","rows","active","showHint","SVGLogo","width","height","viewBox","id","stroke","strokeWidth","fill","fillRule","transform","rx","ry","x","y","Block","props","className","cols","style","backgroundColor","bgcolor","borderColor","border","onClick","clickbox","xcoord","ycoord","Board","this","loadGrid","goalColor","renderBlocks","nextProps","gamehelpers","c","push","key","topcorner","game","clickedColor","clicks","setActive","job","_props","numrows","checkWin","newjob","slice","loops","rowCol","shift","split","row","parseInt","col","bottom","right","top","left","indexOf","setTimeout","checkForWin","finalColor","goal","win","upperLevel","hasWon","Component","WinLose","resultsText","winner","winLen","classes","restart","Info","info","show","App","gameLevel","shuffleColors","state","showInfo","startover","setState","tf","transition","baseColor","e","connect","gameReducer","dispatch","bindActionCreators","gameActions","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.54d94a68.chunk.js","sourcesContent":["export const CLICKS = 'CLICKS';\nexport const GRID = 'GRID';\nexport const BLOCKS = 'BLOCKS';\nexport const HASWON = 'HASWON';\nexport const LEVEL = 'LEVEL';","import * as types from './types';\n\nexport function updateClicks(click) {\n  return {\n    type: types.CLICKS,\n    click\n  };\n}\n\nexport function createGrid(grid) {\n  return {\n    type: types.GRID,\n    grid\n  };\n}\n\nexport function loadBlocks(blocks) {\n  return {\n    type: types.BLOCKS,\n    blocks\n  };\n}\n\nexport function didWin(won) {\n  return {\n    type: types.HASWON,\n    won\n  };\n}\n\nexport function updateLevel(level) {\n  return {\n    type: types.LEVEL,\n    level\n  };\n}\n\n\n","export const winText = [\n  'Great Job!',\n  \"You're Amazing!\",\n  'Well Done!',\n  'Cool!',\n  'Level Up'\n];\n\nexport const colorArrays = {\n  '0': [\n    {\n      'background-color': '#6A0000',\n      'border-color': '#390707'\n    },\n    {\n      'background-color': '#976803',\n      'border-color': '#664212'\n    },\n    {\n      'background-color': '#9CA503',\n      'border-color': '#718425'\n    },\n    {\n      'background-color': '#61A554',\n      'border-color': '#2F871E'\n    },\n    {\n      'background-color': '#238C80',\n      'border-color': '#076A5F'\n    },\n    {\n      'background-color': '#006FA4',\n      'border-color': '#0F3660'\n    },\n    {\n      'background-color': '#4101C8',\n      'border-color': '#440365'\n    },\n    {\n      'background-color': '#7100AC',\n      'border-color': '#2A0B6E'\n    }\n  ],\n  '1': [\n    {\n      'background-color': '#2910A9',\n      'border-color': '#B19DFD'\n    },\n    {\n      'background-color': '#8604CD',\n      'border-color': '#EDB8FC'\n    },\n    {\n      'background-color': '#D600CA',\n      'border-color': '#FFC6F5'\n    },\n    {\n      'background-color': '#FF5A5A',\n      'border-color': '#FFC7D7'\n    },\n    {\n      'background-color': '#FF9440',\n      'border-color': '#FEE578'\n    },\n    {\n      'background-color': '#93C039',\n      'border-color': '#CFF583'\n    },\n    {\n      'background-color': '#00A8E1',\n      'border-color': '#97EFF9'\n    },\n    {\n      'background-color': '#3569E9',\n      'border-color': '#68BFFD'\n    }\n  ],\n  '2': [\n    {\n      'background-color': '#F9A400',\n      'border-color': '#FFEBB9'\n    },\n    {\n      'background-color': '#E176DE',\n      'border-color': '#F7D0F6'\n    },\n    {\n      'background-color': '#BBCB00',\n      'border-color': '#F3F7B8'\n    },\n    {\n      'background-color': '#9A74EB',\n      'border-color': '#CBB9F1'\n    },\n    {\n      'background-color': '#14D6C2',\n      'border-color': '#9BEBE3'\n    },\n    {\n      'background-color': '#0E7EC3',\n      'border-color': '#62B1E1'\n    },\n    {\n      'background-color': '#1CA9FF',\n      'border-color': '#98D8FF'\n    },\n    {\n      'background-color': '#FF7F7F',\n      'border-color': '#FFC3BC'\n    }\n  ],\n  '3': [\n    {\n      'background-color': '#2BA8D5',\n      'border-color': '#5EC5EA'\n    },\n    {\n      'background-color': '#85CEA6',\n      'border-color': '#BEE3CF'\n    },\n    {\n      'background-color': '#FBE16A',\n      'border-color': '#FFF0AC'\n    },\n    {\n      'background-color': '#FAA253',\n      'border-color': '#FBCF88'\n    },\n    {\n      'background-color': '#F05F64',\n      'border-color': '#FFA7AA'\n    },\n    {\n      'background-color': '#132592',\n      'border-color': '#6072E5'\n    },\n    {\n      'background-color': '#5491DC',\n      'border-color': '#96B6F5'\n    },\n    {\n      'background-color': '#9AE4FF',\n      'border-color': '#C6F0FF'\n    }\n  ],\n  '4': [\n    {\n      'background-color': '#2910A9',\n      'border-color': '#7055FF'\n    },\n    {\n      'background-color': '#8604CD',\n      'border-color': '#BB3FFF'\n    },\n    {\n      'background-color': '#D600CA',\n      'border-color': '#FF4AF5'\n    },\n    {\n      'background-color': '#FF5A5A',\n      'border-color': '#FF9F4F'\n    },\n    {\n      'background-color': '#FF9440',\n      'border-color': '#FFE200'\n    },\n    {\n      'background-color': '#93C039',\n      'border-color': '#A7DF35'\n    },\n    {\n      'background-color': '#04AEC4',\n      'border-color': '#3CD7E9'\n    },\n    {\n      'background-color': '#3569E9',\n      'border-color': '#3FAFFF'\n    }\n  ]\n};\n","export function rand(n) {\n  return Math.floor(Math.random() * n);\n}\n\nexport function fisherYates(array) {\n  var m = array.length,\n    t,\n    i;\n\n  // While there remain elements to shuffle\n  while (m) {\n    // Pick a remaining element\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nexport function createLevel(l) {\n  let lvlobj,\n    level = Math.ceil((l + 1) / 8),\n    rows = level + 7,\n    colorSet = l % 8,\n    colors = colorSet <= 4 ? 4 : colorSet,\n    max = 10 + colors + level;\n\n  lvlobj = {\n    colorscheme: level,\n    numberofrows: rows,\n    maxclick: max,\n    numberofcolors: colors\n  };\n\n  return lvlobj;\n}\n\nfunction findColor(i, j, colors) {\n  const square = i + j;\n  const color = rand(colors);\n\n  if (square === 0) {\n    return 2;\n  }\n  if (square === 1) {\n    return color === 2 ? 3 : color;\n  }\n\n  return color;\n}\n\nexport function populateGrid(rows, colors) {\n  let grid = [];\n\n  // create the grid array\n  for (let i = 0; i < rows; i++) {\n    // make a new array for each row of the grid\n    grid[i] = [];\n    for (let j = 0; j < rows; j++) {\n      // get a random number between 0 and the # of available colors\n      let color = findColor(i, j, colors);\n      let active = i + j === 0 ? true : false;\n\n      // assigned that number to a slot in the grid\n      grid[i][j] = {\n        color,\n        active,\n        showHint: false\n      };\n    }\n  }\n\n  return grid;\n}\n\n// update grid with new colors and active dots\nexport function setActive(\n  job,\n  topcorner,\n  clickedColor,\n  _props,\n  numrows,\n  checkWin\n) {\n  let newjob = [],\n    grid = _props.game.grid.slice(0),\n    loops = job.length;\n\n  // loop through the jobs\n  for (var x = 0; x < loops; x++) {\n    // get the coordinates of the next dot\n    let rowCol = job.shift().split(' ');\n    let row = parseInt(rowCol[0], 10);\n    let col = parseInt(rowCol[1], 10);\n\n    // if this dot is either the old or new color continue\n    if (\n      grid[row][col].color === clickedColor ||\n      grid[row][col].color === topcorner\n    ) {\n      // they should all be the new color\n      grid[row][col] = {\n        color: clickedColor,\n        active: true,\n        showHint: true\n      };\n\n      // get the coords of the surrounding dots\n      let bottom = row < numrows - 1 ? grid[row + 1][col] : null;\n      let right = col < numrows - 1 ? grid[row][col + 1] : null;\n      let top = row > 0 ? grid[row - 1][col] : null;\n      let left = col > 0 ? grid[row][col - 1] : null;\n\n      // check each surrounding dot to see if it needs to be updated\n      if (row < numrows - 1) {\n        if (\n          (bottom.color === topcorner && bottom.active === true) ||\n          (bottom.color === clickedColor && bottom.active === false)\n        ) {\n          if (newjob.indexOf(row + 1 + ' ' + col) === -1) {\n            newjob.push(row + 1 + ' ' + col);\n          }\n        }\n      }\n\n      if (col < numrows - 1) {\n        if (\n          (right.color === topcorner && right.active === true) ||\n          (right.color === clickedColor && right.active === false)\n        ) {\n          if (newjob.indexOf(row + ' ' + (col + 1)) === -1) {\n            newjob.push(row + ' ' + (col + 1));\n          }\n        }\n      }\n\n      if (row > 0) {\n        if (\n          (top.color === topcorner && top.active === true) ||\n          (top.color === clickedColor && top.active === false)\n        ) {\n          if (newjob.indexOf(row - 1 + ' ' + col) === -1) {\n            newjob.push(row - 1 + ' ' + col);\n          }\n        }\n      }\n\n      if (col > 0) {\n        if (\n          (left.color === topcorner && left.active === true) ||\n          (left.color === clickedColor && left.active === false)\n        ) {\n          if (newjob.indexOf(row + ' ' + (col - 1)) === -1) {\n            newjob.push(row + ' ' + (col - 1));\n          }\n        }\n      }\n    }\n  }\n\n  // update grid state\n  _props.createGrid(grid);\n\n  // if there are dots that need to be updated run again\n  if (newjob.length > 0 && newjob !== []) {\n    setTimeout(function() {\n      setActive(newjob, topcorner, clickedColor, _props, numrows, checkWin);\n    }, 45);\n    // if there aren't then check for a win\n  } else {\n    checkWin(_props);\n  }\n}\n","import React from 'react';\nimport './Logo.css';\n\nconst SVGLogo = () => {\n  return (\n    <svg width=\"64px\" height=\"64px\" viewBox=\"0 0 64 64\">\n      <title>Logo</title>\n      <g id=\"Logo\" stroke=\"none\" strokeWidth=\"0\" fill=\"none\" fillRule=\"evenodd\">\n        <g\n          id=\"group4\"\n          transform=\"translate(48.000000, 32.000000)\"\n          fill=\"#3771FF\"\n        >\n          <rect\n            id=\"rect-11\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-15\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"16\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n        </g>\n        <g\n          id=\"group3\"\n          transform=\"translate(16.000000, 16.000000)\"\n          fill=\"#3DBFCE\"\n        >\n          <rect\n            id=\"rect-9\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"16\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-14\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"16\"\n            y=\"32\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-11\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"32\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n        </g>\n        <g\n          id=\"group2\"\n          transform=\"translate(0.000000, 16.000000)\"\n          fill=\"#8D85F2\"\n        >\n          <rect\n            id=\"rect-7\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"16\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-8\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"32\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-10\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"32\"\n            y=\"16\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-12\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"32\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-13\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"16\"\n            y=\"32\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n        </g>\n        <g id=\"group1\" fill=\"#A4CA57\">\n          <rect\n            id=\"rect-4\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-5\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"16\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-6\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"32\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n        </g>\n        <g\n          id=\"group0\"\n          transform=\"translate(16.000000, 0.000000)\"\n          fill=\"#FFA424\"\n        >\n          <rect\n            id=\"rect-2\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"0\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n          <rect\n            id=\"rect-3\"\n            rx=\"10\"\n            ry=\"10\"\n            x=\"16\"\n            y=\"0\"\n            width=\"16\"\n            height=\"16\"\n          ></rect>\n        </g>\n        <rect\n          id=\"rect-1\"\n          rx=\"10\"\n          ry=\"10\"\n          fill=\"#FF5A5A\"\n          x=\"48\"\n          y=\"0\"\n          width=\"16\"\n          height=\"16\"\n        ></rect>\n      </g>\n    </svg>\n  );\n};\n\nexport default SVGLogo;\n","import React from 'react';\n\nimport './Block.css';\n\nconst Block = props => {\n  return (\n    <div\n      className={'block block-' + props.cols}\n      style={{\n        backgroundColor: props.bgcolor,\n        borderColor: props.border\n      }}\n      onClick={(x, y) => props.clickbox(props.xcoord, props.ycoord)}\n    />\n  );\n};\n\nexport default Block;\n","import React, { Component } from 'react';\nimport Block from '../Block/Block.js';\n\nimport * as gamehelpers from '../../helpers/helpers.js';\nimport './Board.css';\n\nexport default class Board extends Component {\n  componentDidMount() {\n    let grid = this.loadGrid(\n      this.props.numberofrows,\n      this.props.numberofcolors,\n      this.props.goalColor\n    );\n    this.renderBlocks(\n      grid,\n      this.props.numberofrows,\n      this.props.colors,\n      this.props.goalColor\n    );\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.grid !== nextProps.grid) {\n      this.renderBlocks(\n        nextProps.grid,\n        nextProps.numberofrows,\n        nextProps.colors,\n        nextProps.goalColor\n      );\n    }\n  }\n\n  loadGrid(rows, colors, goalColor) {\n    let grid = gamehelpers.populateGrid(rows, colors, goalColor);\n    this.props.createGrid(grid);\n    return grid;\n  }\n\n  renderBlocks(grid, rows, colors, goalColor) {\n    let blocks = [];\n    // create the grid array\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < rows; j++) {\n        // get the number from the current grid block\n        let c = grid[i][j].color;\n        let active = grid[i][j].active;\n\n        // testing new impossible style\n        let backgroundColor = colors[c]['background-color'];\n        let borderColor = active ? 'white' : colors[c]['border-color'];\n\n        // if (colors[c]['background-color'] === goalColor) {\n        //   borderColor = colors[c]['border-color'];\n        // }\n\n        // assign a dom element to a slot in the box grid\n        blocks.push(\n          <Block\n            key={'row' + i + 'col' + j}\n            clickbox={(x, y) => this.clickbox(x, y)}\n            xcoord={i}\n            ycoord={j}\n            cols={rows}\n            bgcolor={backgroundColor}\n            border={borderColor}\n            //radius={borderRadius}\n          />\n        );\n      }\n    }\n\n    this.props.loadBlocks(blocks);\n  }\n\n  clickbox(x, y) {\n    // new array with 0,0 x,y coords\n    let job = ['0 0'];\n\n    // topcorner is the first number in the grid\n    let topcorner = this.props.game.grid[0][0].color;\n\n    // clickedColor is the number from div you clicked\n    let clickedColor = this.props.game.grid[x][y].color;\n\n    // if you clicked on the color that's already in the corner then return\n    // no loss no gain\n    if (topcorner === clickedColor) return;\n\n    // otherwise increase clicks\n    let clicks = this.props.game.clicks + 1;\n    this.props.updateClicks(clicks);\n\n    // and repaint the grid\n    gamehelpers.setActive(\n      job,\n      topcorner,\n      clickedColor,\n      this.props,\n      this.props.numberofrows,\n      this.checkForWin\n    );\n  }\n\n  checkForWin(_props) {\n    var c = _props.grid[0][0].color,\n      finalColor = _props.colors[c],\n      goal = _props.colors[0];\n\n    // if number of clicks is less than or equal to maxclick win will be set to true\n    var win = _props.game.clicks <= _props.maxclick;\n\n    // this checks to see if all of the boxes are the same color\n    // as soon as it reachesa box that is a different color from the top left corner\n    // it breaks out of the loop\n    if (win) {\n      for (var i = 0; i < _props.numberofrows; i++) {\n        for (var j = 0; j < _props.numberofrows; j++) {\n          if (_props.grid[i][j].color !== c) {\n            win = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (win === true && finalColor !== goal) {\n      win = 'almost';\n    }\n\n    // update redux state of hasWon\n    if (win === true) {\n      let upperLevel = _props.game.level + 1;\n      _props.didWin(win);\n      _props.updateLevel(upperLevel);\n    } else if (win === 'almost') {\n      _props.didWin(win);\n    } else if (_props.game.clicks >= _props.maxclick - 1) {\n      _props.didWin(false);\n    }\n  }\n\n  render() {\n    return (\n      <div className={'gameBoard won-' + this.props.game.hasWon}>\n        <div className=\"game\">{this.props.game.blocks}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { winText } from '../../helpers/constants.js';\nimport { rand } from '../../helpers/helpers.js';\n\nimport './WinLose.css';\n\nconst WinLose = props => {\n  let winner = props.won;\n  let winLen = winText.length;\n  let classes = '',\n    resultsText;\n\n  if (winner === true) {\n    resultsText = (\n      <div>\n        <p>{winText[rand(winLen)]}</p>\n        <span onClick={props.restart} className=\"btn\">\n          Next Level\n        </span>\n      </div>\n    );\n  } else if (winner === false) {\n    resultsText = (\n      <div>\n        <p>Maybe Next Time!</p>\n        <span onClick={props.restart} className=\"btn\">\n          Try Again\n        </span>\n      </div>\n    );\n  } else if (winner === 'almost') {\n    resultsText = (\n      <div>\n        <p>Mismatch!</p>\n        <p>Make sure the last color you click matches the background.</p>\n        <span onClick={props.restart} className=\"btn\">\n          Try Again\n        </span>\n      </div>\n    );\n  } else {\n    classes = 'hidden';\n  }\n\n  return <div className={'winlose ' + classes}>{resultsText}</div>;\n};\nexport default WinLose;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as gameActions from '../actions';\n\nimport { colorArrays } from '../helpers/constants.js';\nimport * as gamehelpers from '../helpers/helpers.js';\n\nimport Logo from './Logo/Logo.js';\nimport Board from './Board/Board.js';\nimport WinLose from './WinLose/WinLose.js';\n\nimport './App.css';\n\nclass Info extends Component {\n  render() {\n    let info = (\n      <div className=\"triggerInfo\">\n        <span>?</span>\n      </div>\n    );\n\n    if (this.props.show === true) {\n      info = (\n        <div className=\"triggerInfo triggered\">\n          <small className=\"instructions\">\n            <span>?</span>Click the dots to change their colors. Your goal is to\n            make them all match the page background.\n          </small>\n        </div>\n      );\n    }\n    return info;\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let gameLevel = Math.ceil((this.props.game.level + 1) / 8) % 5;\n    let shuffleColors = gamehelpers.fisherYates(colorArrays[gameLevel]);\n    this.state = {\n      showInfo: false,\n      colors: shuffleColors,\n      level: gamehelpers.createLevel(this.props.game.level)\n    };\n  }\n  restart(startover) {\n    const { game } = this.props;\n    let gameLevel = Math.ceil((game.level + 1) / 8) % 5;\n    let shuffleColors = gamehelpers.fisherYates(colorArrays[gameLevel]);\n    let level = gamehelpers.createLevel(game.level);\n\n    // reset game state\n    this.props.updateClicks(0);\n\n    if (startover === true) {\n      level = gamehelpers.createLevel(0);\n      this.props.didWin(null);\n      this.props.updateLevel(0);\n    } else {\n      this.props.didWin(null);\n    }\n\n    this.setState({\n      colors: shuffleColors,\n      level: level\n    });\n\n    let grid = gamehelpers.populateGrid(\n      level.numberofrows,\n      level.numberofcolors,\n      0\n    );\n\n    this.props.createGrid(grid);\n  }\n  showInfo(tf) {\n    this.setState({ showInfo: tf });\n  }\n  render() {\n    const { game } = this.props;\n    const level = this.state.level;\n    const transition = game.level <= 23 ? true : false;\n    let baseColor = this.state.colors[0]['background-color'];\n    return (\n      <div\n        className={'content transition-' + transition}\n        style={{ backgroundColor: baseColor }}\n      >\n        <div className=\"header\">\n          <Logo />\n          <div className=\"h1\">\n            Color Flood\n            <div onClick={tf => this.showInfo(!this.state.showInfo)}>\n              <Info show={this.state.showInfo} />\n            </div>\n          </div>\n          <div className=\"count\">\n            Moves Left: <span>{level.maxclick - game.clicks}</span>\n          </div>\n        </div>\n        <Board\n          colors={this.state.colors}\n          goalColor={baseColor}\n          grid={game.grid}\n          game={game}\n          updateClicks={this.props.updateClicks}\n          updateLevel={this.props.updateLevel}\n          createGrid={this.props.createGrid}\n          loadBlocks={this.props.loadBlocks}\n          didWin={this.props.didWin}\n          numberofrows={level.numberofrows}\n          numberofcolors={level.numberofcolors}\n          maxclick={level.maxclick}\n        />\n        <WinLose\n          won={game.hasWon}\n          restart={startover => this.restart(startover)}\n        />\n        <div className=\"header\">\n          <div className=\"newgame\" onClick={e => this.restart(true)}>\n            New Game\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    game: state.gameReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      updateClicks: gameActions.updateClicks,\n      createGrid: gameActions.createGrid,\n      loadBlocks: gameActions.loadBlocks,\n      didWin: gameActions.didWin,\n      updateLevel: gameActions.updateLevel\n    },\n    dispatch\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from '../actions/types';\n\nconst initialState = {\n  hasWon: null,\n  level: 1,\n  clicks: 0,\n  grid: [],\n  blocks: []\n};\n\nexport default function GameReducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case types.CLICKS:\n      return {\n        ...state,\n        clicks: action.click\n      };\n    case types.GRID:\n      return {\n        ...state,\n        grid: action.grid\n      };\n    case types.BLOCKS:\n      return {\n        ...state,\n        blocks: action.blocks\n      };\n    case types.HASWON:\n      return {\n        ...state,\n        hasWon: action.won\n      };\n    case types.LEVEL:\n      return {\n        ...state,\n        level: action.level\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\n// Reducers\nimport gameReducer from './game-reducers';\n\n// Combine Reducers\nvar reducers = combineReducers({\n    gameReducer: gameReducer\n});\n\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from './reducers';\n\nconst store = createStore(reducers);\nexport default store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}